generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  email            String          @unique
  password         String
  firstName        String
  lastName         String
  role             String          @default("User")
  classId          String
  chats            Chat[]          @relation("UserChats")
  class            Class           @relation(fields: [classId], references: [id], onDelete: Cascade)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  profileImage     String          @default("default.png")

  @@index([email])
  @@index([classId])
}


model Admin{
  id               String          @id @default(uuid())
  email            String          @unique
  password         String
  firstName        String
  lastName         String
  role             String          @default("User")
  classId          String
  chats            Chat[]          @relation("AdminChats")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([email])
  @@index([classId])
}
model Class {
  id               String          @id @default(uuid())
  course           Course
  semester         Semester
  section          Section
  students         User[]
  subjects         Subject[]       @relation("ClassSubjects")  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([course, semester, section])
}

model Subject {
  id               String          @id @default(uuid())
  name             String
  code             String          @unique
  teachername      String
  resources        Resource[]  
  classes          Class[]         @relation("ClassSubjects")  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([name])
}

model Resource {
  id               String          @id @default(uuid())
  title            String
  type             ResourceType    @default(Link)
  url              String
  subjectId        String
  subject          Subject         @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  uploadedBy       String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([subjectId])
  @@index([type])
  @@index([createdAt])
}

model Chat {
  id              String          @id @default(uuid())
  userId          String
  adminId         String 
  messages        ChatMessage[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  user            User            @relation("UserChats", fields: [userId], references: [id], onDelete: Cascade)
  admin           Admin           @relation("AdminChats", fields: [adminId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([createdAt])
}

model ChatMessage {
  id              String          @id @default(uuid())
  chatId          String
  role            MessageRole     @default(User)
  name            String
  content         String
  timestamp       DateTime        @default(now())
  chat            Chat            @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@index([timestamp])

}

enum MessageRole {
  User
  AI
}

enum ResourceType {
  Video
  Document
  Link
}

enum Course {
  Btech
  Mtech
}

enum Semester {
  First
  Second
  Third
  Fourth
  Fifth
  Sixth
  Seventh
  Eighth
}

enum Section {
  A
  B
  C
  D
  CE
}